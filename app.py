import os, secrets
from flask import Flask, request, Response, render_template, redirect, abort
from src.model.product import Product, InventorySnapshot, db
from src.model.user import User, Role, UserRoles, user_db
from flask_security import Security, PeeweeUserDatastore, auth_required, hash_password

app = Flask(__name__, static_url_path='', static_folder='static')

app.config['SECRET_KEY'] = secrets.token_urlsafe()

#TODO: This should NOT be hardcoded in production
app.config['SECURITY_PASSWORD_SALT'] = os.environ.get("SECURITY_PASSWORD_SALT", '146585145368132386173505678016728509634')

# Setup Flask-Security
user_datastore = PeeweeUserDatastore(user_db, User, Role, UserRoles)
security = Security(app, user_datastore)

with db:
    db.create_tables([Product, InventorySnapshot])

with user_db:
    user_db.create_tables([User, Role, UserRoles])

# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    db.connect()


# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not db.is_closed():
        db.close()




@app.get("/")
@auth_required()
def home():
    products = Product.all()
    return render_template("index.html", product_list=products)

@app.get("/inventory-history")
def inventory_history():
    product_id = request.args.get('product-id', None, type=int)
    if product_id is None: # TODO: have actual error page
        return abort(404, description=f"Could not find product id")
    
    product = Product.get_product(product_id)
    if product is None: # TODO: have actual error page
        return abort(404, description=f"Could not find product {product_id}")
    
    snapshots = InventorySnapshot.all_of_product(product_id)
    usage = product.get_usage_per_day() 
    days_until_out = product.get_days_until_out(usage)

    return render_template(
        "inventory_history.html",
        product=product,
        snapshots=snapshots,
        snapshot_count=len(snapshots),
        daily_usage=round(usage, 1) if usage is not None else None,
        days_until_out=round(days_until_out) if days_until_out is not None else None,
    )



#Simple add, just adds stuff + 1 works with htmx
#TODO: make this a form
@app.route("/add", methods=["POST"])
def add():
    products = Product.all()
    count = len(products)
    stuff = "stuff" + str(count)
    Product.add_product(stuff, 5, 5.00, "piles", 0, "")

    return redirect("/")

@app.route("/update/inventory/<int:product_id>", methods=["PATCH"])
def update_inventory(product_id: int):
    new_stock = request.form.get('stock', None, type=int)
    if new_stock is None or new_stock < 0:
        return abort(400, description="Stock count must be a positive integer")
    
    product = Product.get_product(product_id)
    if product is None:
        return abort(404, description=f"Could not find product {product_id}")

    product.update_stock(new_stock)

    return redirect("/", 303)


with app.app_context():
    if not security.datastore.find_user(email="admin@thehrdc.org"):
        security.datastore.create_user(email="admin@thehrdc.org", password=hash_password("password"))

if __name__ == '__main__':
    app.run(port=5000, debug=True)